1. if you want all password should be saved in your database need to be saved in encripted form in your django. how you will achieve it ?

2. if the user logged in and the other user logged in using the same credentials on other system .how will you restrict the access of the second user.and raise the  warning mgs ..

--> by using the middleware ...

#Session model stores the session data
from django.contrib.sessions.models import Session

class OneSessionPerUserMiddleware:
    # Called only once when the web server starts
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.
        if request.user.is_authenticated:
            stored_session_key = request.user.logged_in_user.session_key

            # if there is a stored_session_key  in our database and it is
            # different from the current session, delete the stored_session_key
            # session_key with from the Session table
            if stored_session_key and stored_session_key != request.session.session_key:
                Session.objects.get(session_key=stored_session_key).delete()

            request.user.logged_in_user.session_key = request.session.session_key
            request.user.logged_in_user.save()

        response = self.get_response(request)

        # This is where you add any extra code to be executed for each request/response after
        # the view is called.
        # For this tutorial, we're not adding any code so we just return the response

        return response


3. how you will perform the rbac in your application .----> django guardian --> assign_perm("maintenace", "username", task)

4. assume your servers needs to be connected to the other servers at the same time. how you will achieve it ? 
establishment of the communication between the servers ---> done by the paramiko module 
server's ip addresses is the id for us ... what we can do now --> paramiko -->multitreading or the celery or current.futures(python 3.x) or asyncio module 

5. there is an application --> accordingly you have to design the database schema .

6. suppose your few servers are facing the overloading issues (redirecting ) ... how you will you deal with it.?
reverse proxy conncept is there where nginx can play a vital role ... they can use the round robin algo for redirectional also .

7. jwt can be created some issues ...? few scenarios are based on that only.
jwt is json web token .... refresh token(24 hrs), access token(5min), verify token is having ..

8. how you will with the multiple claims in the jwt authentication ? 

9. why most of the websites prefer to move towards the jwt authentication ?

10. is nginx is reverse proxy , then how it acting like that ?



